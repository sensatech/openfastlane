import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20"
        classpath("org.jetbrains.kotlin:kotlin-noarg:1.9.20")
        classpath("org.jetbrains.kotlin:kotlin-allopen:1.9.20")
        classpath("org.jlleitschuh.gradle:ktlint-gradle:10.3.0")
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.springframework.boot' version '3.1.5' apply false
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint" version '10.3.0' apply false
}


subprojects {

    group = 'at.sensatech.openfastlane'
    version = '1.0.0' // UPDATE version!!

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'jacoco'
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ext['junit-jupiter.version'] = '5.10.0'

    ext {
        springDoc = "1.6.7"
        springBootVersion = '3.1.5'
        kotlinxCoroutinesVersion = "1.7.1"
        hibernateVersion = "6.2.3.Final"
        flywayVersion = "9.19.1"
        jupiterVersion = "5.9.3"
        firebaseAdminVersion = "9.1.1"
        mockkVersion = "1.13.5"
        springmockkVersion = "4.0.2"
        zonkPostegresTestVersion = "2.3.0"
        testContainersVersion = "1.18.3"
    }
    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion") {
                bomProperty("kotlin.version", "1.9.20")
            }
        }
    }

    test {
        systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
        useJUnitPlatform()
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
            events("skipped", "failed")
        }
        systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    }

    jacocoTestReport {
        dependsOn test

        reports {
            csv.required.set(true)
            xml.required.set(true)
            // "csv.destination file" not supported. Setting files here, get nothing.
        }
    }

    check.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}
